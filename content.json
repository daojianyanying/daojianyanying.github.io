{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://daojianyanying.github.io","root":"/"},"pages":[{"title":"about","date":"2024-04-22T12:02:21.000Z","updated":"2024-04-22T12:02:21.824Z","comments":true,"path":"about/index.html","permalink":"https://daojianyanying.github.io/about/index.html","excerpt":"","text":""},{"title":"books","date":"2024-04-22T12:01:56.000Z","updated":"2024-04-22T12:01:56.259Z","comments":true,"path":"books/index.html","permalink":"https://daojianyanying.github.io/books/index.html","excerpt":"","text":""},{"title":"links","date":"2024-04-22T12:01:30.000Z","updated":"2024-04-22T12:01:30.298Z","comments":true,"path":"links/index.html","permalink":"https://daojianyanying.github.io/links/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2024-04-22T09:42:47.000Z","updated":"2024-04-22T11:24:21.193Z","comments":true,"path":"categories/index.html","permalink":"https://daojianyanying.github.io/categories/index.html","excerpt":"","text":""},{"title":"repository","date":"2024-04-22T12:00:44.000Z","updated":"2024-04-22T12:00:44.360Z","comments":true,"path":"repository/index.html","permalink":"https://daojianyanying.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2024-04-22T09:07:23.000Z","updated":"2024-04-22T11:22:39.237Z","comments":true,"path":"tags/index.html","permalink":"https://daojianyanying.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"Minio的安装和使用","date":"2024-06-14T08:27:47.234Z","updated":"2024-06-14T09:12:39.155Z","comments":true,"path":"2024/06/14/Minio的安装和使用/","permalink":"https://daojianyanying.github.io/2024/06/14/Minio%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/","excerpt":"","text":"123456789101112docker run -d --name devops_minio \\--restart=always --privileged=true \\-p 9990:9000 \\-p 9991:9001 \\-v /etc/localtime:/etc/localtime \\-v /data/devops/minio:/data \\-e &quot;TimeZone=Asia/Shanghai&quot; \\-e &quot;MINIO_ROOT_USER=devops&quot; \\-e &quot;MINIO_ROOT_PASSWORD=/8520*963.lx&quot; \\-e &quot;MINIO_SERVER_URL=http://192.168.17.140:9990&quot; \\minio/minio:RELEASE.2024-06-11T03-13-30Z server /data --console-address &quot;:9001&quot;","categories":[],"tags":[]},{"title":"SonarQube使用","slug":"SonarQube使用","date":"2024-05-26T15:03:34.000Z","updated":"2024-05-26T15:07:43.093Z","comments":true,"path":"2024/05/26/SonarQube使用/","permalink":"https://daojianyanying.github.io/2024/05/26/SonarQube%E4%BD%BF%E7%94%A8/","excerpt":"","text":"环境依赖和链接: sonarqube-9.9：https://www.sonarsource.com/products/sonarqube/downloads/ sonarqube9.9的安装环境说明： https://docs.sonarsource.com/sonarqube/9.9/requirements/prerequisites-and-overview/ sonarscanner-5.0：https://docs.sonarsource.com/sonarqube/9.9/analyzing-source-code/scanners/sonarscanner/ sonarqube插件地址: sonar9.9文档下载: https://docs.sonarsource.com/sonarqube/9.9/setup-and-upgrade/overview/ jdk-17: https://mirrors.huaweicloud.com/openjdk/ PostgreSQL-15：https://www.postgresql.org/download/windows/ 一、Sonar的安装 1.1、安装所选择的版本 1.2、二进制安装 1.2.1、安装jdk-17 1.2.2、安装PSQL-15 1.2.2.1、安装 1.2.2.2、配置 1.2.2.3、psql配置开机自启动 1.2.2.3、psql创建sonar用户 1.2.3、安装sonarqube-9.9 1.2.3.1、下载安装 1.2.3.2、配置和启动 1.2.3.3、登陆 1.2.3.4、基础插件安装(对应LTS-9.9.0的版本) 1.3、docker安装Sonar 1.3.1、docker的安装和配置 1.3.2、docker拉取镜像 1.3.3、docker启动sonar 1.4、k8s安装Sonar 二、Sonar的配置 三、Sonar扫描java代码 四、Sonar扫描C++&#x2F;C代码 五、Sonar扫描go代码 六、Sonar扫描前端代码 七、增量扫描 八、Sonar的api接口 一、Sonar的安装1.1、安装所选择的版本 sonarqube: 9.9LTA jdk: 17 sonar-scanner: 4.7 psql: 15 jenkins： docker: k8s： 1.2、二进制安装1.2.1、安装jdk-171234567891011# 解压软件wget https://mirrors.huaweicloud.com/openjdk/17.0.2/openjdk-17.0.2_linux-x64_bin.tar.gzmkdir -p /usr/local/bin/tar -zxvf openjdk-17.0.2_linux-x64_bin.tar.gz -C /usr/local/bin/# 配置环境变量 在末尾添加元素vim /etc/profile# 在末尾增加内容：# export JAVA_HOME=/usr/local/bin/jdk-17.0.2 # export PATH=$JAVA_HOME/bin:$PATHsource /etc/profile 1.2.2、安装PSQL-151.2.2.1、安装12345678910111213# 使用源码编译的方式安装wget https://ftp.postgresql.org/pub/source/v15.7/postgresql-15.7.tar.gzmkdir -p /tmp/psql/tar -zxvf postgresql-15.7.tar.gz -C /tmp/psql/# 安装依赖yum install -y perl-ExtUtils-Embed readline-devel zlib-devel pam-devel libxml2-devel libxslt-devel openldap-devel python-devel gcc-c++ openssl-devel cmake# 编译源码cd /tmp/psql/postgresql-15.7./configure --prefix=/usr/local/bin/psql15/makemake install# 1.2.2.2、配置1234567891011121314151617181920212223242526# 创建psql的用户和群组groupadd postgresuseradd -g postgres postgresid postgres# 创建psql目录cd /usr/local/bin/psql15/mkdir data &amp;&amp; chown postgres:postgres data# 配置psql的环境变量 vim /home/postgres/.bash_profile #添加如下内容# export PGHOME=/usr/local/bin/psql15/# export PGDATA=/usr/local/bin/psql15/data# PATH=$PATH:$HOME/bin:$PGHOME/bin# 初始化psqlsu - postgresinitdb# 配置psql服务cd /usr/local/bin/psql15/datavim postgresql.conf # listen_addresses = &#x27;*&#x27;vim pg_hba.conf# host all all 0.0.0.0/0 trust 1.2.2.3、psql配置开机自启动1234567891011121314151617181920# 从安装包获取自启动脚本cd /tmp/psql/postgresql-15.7/contrib/start-scriptschmod a+x linuxcp linux /etc/init.d/postgresql# 修改自启动脚本中的psql路径vim /etc/init.d/postgresql# prefix=/usr/local/bin/psql15# PGDATA=&quot;/usr/local/bin/psql15/data&quot;# 添加开机自启动chkconfig --add postgresql# 查看开机自启动chkconfig # postgresql 0:off 1:off 2:on 3:on 4:on 5:on 6:off# 启动服务service postgresql start 1.2.2.3、psql创建sonar用户1234567891011121314151617# 切换用户su - postgrespsql# 创建postgresql的账户(role)create user sonar# 使用template0模板创建sonar数据库create database sonar with encoding &#x27;utf8&#x27; owner sonar template=template0;# 配置sonar角色的密码alter user sonar with password &#x27;sonar&#x27;;# 配置创建数据库权限 管理员权限 创建角色权限alter role sonar createdb; alter role sonar superuser; alter role sonar createrole;# sonar赋仓库权限alter database sonar owner to sonar; 1.2.3、安装sonarqube-9.91.2.3.1、下载安装123456789101112# 下载zip包wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.9.5.90363.zip# 安装解压zip包的软件yum install -y unzipunzip sonarqube-9.9.5.90363.zip -d /usr/local/binmv sonarqube-9.9.5.90363 sonar# 创建用户,不能以root账户启动esuseradd sonarqubegroupadd sonarqube 1.2.3.2、配置和启动123456789101112131415# 设置进程最大同时打开文件数和最大线程数vim /etc/sysctl.conf# 末尾增加 vm.max_map_count=655360sysctl -pvim /etc/security/limits.conf# 末尾增加: * soft nofile 65536# 末尾增加: * hard nofile 65536# 设置为数据库的账户和密码;默认postsql就会生成postgres和密码vim conf/sonar.properties# sonar.jdbc.username=sonar # sonar.jdbc.password=sonar# sonar.jdbc.url=jdbc:postgresql://localhost/sonar 1.2.3.3、登陆123sonarqube默认的账户密码:账户: admin密码: admin 1.2.3.4、基础插件安装(对应LTS-9.9.0的版本) 中文插件:&ensp; sonar-l10n-zh-plugin-9.9.jar(https://github.com/xuhuisheng/sonar-l10n-zh/releases) CXX插件:&ensp; sonar-cxx-plugin-2.1.1.488.jar 多分支插件:&ensp;sonarqube-community-branch-plugin-1.15.0.jar &ensp;&ensp;Sonar插件的安装，下载如上对应Sonarqube-9.9.0的对应版本，将.jar文件放到sonarqube的安装目录的extensions&#x2F;plugins下,重启sonar即可; 如果sonarqube重启失败,则可能是其中的插件存在问题,可以根据日志(logs&#x2F;sonar.log)定位是哪个插件加载的问题。 1.3、docker安装Sonar1.3.1、docker的安装和配置1.3.2、docker拉取镜像1234567891011121314151617181920212223242526272829303132333435363738# 拉取9.9.5LTS版本的镜像root@codehub:~# docker pull sonarqube:9.9.5-community9.9.5-community: Pulling from library/sonarqube4a023cab5400: Pull completedce394e5c05f: Pull completee026920ea2a9: Pull complete70d0df997d9c: Pull completec863a9ccf459: Pull complete720ff7f998d1: Pull completead35aa63843c: Pull complete4f4fb700ef54: Pull completeDigest: sha256:a32ae80ca6b62852a4d170a711f9a4b4aeac9a0c379cefb4b16de1df0fc10641Status: Downloaded newer image for sonarqube:9.9.5-communitydocker.io/library/sonarqube:9.9.5-communityroot@codehub:~## 拉取psql15版本的镜像root@codehub:~# docker pull postgres:15.615.6: Pulling from library/postgresb0a0cf830b12: Pull completeb311dac095c3: Pull complete36163cea98c3: Pull completefe401a45083b: Pull completeb4f63e66f657: Pull complete9a8245430c33: Pull complete74c893d239e5: Pull complete789ed9a95b21: Pull complete5b691e4e12b4: Pull completee502d5360f88: Pull complete0292671f3c2d: Pull complete5247a27db111: Pull completeb3a42a5269c3: Pull complete5fc19b802589: Pull completeDigest: sha256:1ebd963e5c598f944a4e9ba27de4c95289d663dcc73731025aa53c5254094d8fStatus: Downloaded newer image for postgres:15.6docker.io/library/postgres:15.6root@codehub:~# 1.3.3、docker启动sonar123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475# 1. psql的安装root@codehub:/data# mkdir -p /data/psqldata# 创建docker网络root@codehub:/data# docker network create sonarqube# 启动容器root@codehub:/data# docker run --name postgres15 \\--net sonarqube \\-e POSTGRES_PASSWORD=/8520*963.lx \\-p 5432:5432 \\--restart always \\--privileged=true \\-e TZ=Asia/Shanghai \\-v /data/psqldata:/var/lib/postgresql/data \\-v /etc/localtime:/etc/localtime:ro \\-d postgres:15.6# 配置数据库docker exec -it postgres15 /bin/bashpsql -U postgres# 创建postgresql的账户(role)create user sonar;# 使用template0模板创建sonar数据库create database sonar with encoding &#x27;utf8&#x27; owner sonar template=template0;# 配置sonar角色的密码alter user sonar with password &#x27;sonar&#x27;;# 配置创建数据库权限 管理员权限 创建角色权限alter role sonar createdb; alter role sonar superuser; alter role sonar createrole;# sonar赋仓库权限alter database sonar owner to sonar;\\q# 2.sonar安装root@codehub:/data# mkdir -p /data/sonarquberoot@codehub:/data/sonarqube# cd /data/sonarqube/root@codehub:/data/sonarqube# mkdir dataroot@codehub:/data/sonarqube# mkdir configroot@codehub:/data/sonarqube# mkdir logs# 拉取镜像root@codehub:/data/psqldata# docker pull sonarqube:9.9-community9.9-community: Pulling from library/sonarqubeDigest: sha256:a32ae80ca6b62852a4d170a711f9a4b4aeac9a0c379cefb4b16de1df0fc10641Status: Downloaded newer image for sonarqube:9.9-communitydocker.io/library/sonarqube:9.9-communityroot@codehub:/data/sonarqube/data# echo &quot;vm.max_map_count=262144&quot; &gt; /etc/sysctl.confroot@codehub:/data/sonarqube/data# sysctl -pvm.max_map_count = 262144# 配置挂载目录的权限,不设置会导致docker启动sonar的全新问题root@codehub:/data/sonarqube/data# chmod -R 777 /data/sonarqube# 启动镜像root@codehub:/data/sonarqube# docker run -d --name sonarqube9.9 -p 9000:9000 \\--net sonarqube \\--privileged=true \\--restart always \\-e TZ=Asia/Shanghai \\-e SONAR_JDBC_URL=jdbc:postgresql://192.168.17.150:5432/sonar \\-e SONAR_JDBC_USERNAME=sonar \\-e SONAR_JDBC_PASSWORD=sonar \\-v /data/sonarqube/logs:/opt/sonarqube/logs \\-v /data/sonarqube/conf:/opt/sonarqube/conf \\-v /data/sonarqube/data:/opt/sonarqube/data \\-v /data/sonarqube/extensions:/opt/sonarqube/extensions \\-v /etc/localtime:/etc/localtime:ro \\sonarqube:9.9-communityb7d6dea2ce648b1092223f46e82e004fc1bfdddcf81381004accde92f307f0e4# 3.创建容器并运行 1.4、k8s安装Sonar二、Sonar的配置三、Sonar扫描java代码四、Sonar扫描C++&#x2F;C代码五、Sonar扫描go代码六、Sonar扫描前端代码七、增量扫描八、Sonar的api接口","categories":[],"tags":[]},{"title":"代码管理工具(3)-Repo","slug":"代码管理工具-3-Repo","date":"2024-04-22T11:36:37.000Z","updated":"2024-05-07T02:59:10.808Z","comments":true,"path":"2024/04/22/代码管理工具-3-Repo/","permalink":"https://daojianyanying.github.io/2024/04/22/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-3-Repo/","excerpt":"","text":"一、Gerrit二、三、","categories":[{"name":"代码管理","slug":"代码管理","permalink":"https://daojianyanying.github.io/categories/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://daojianyanying.github.io/tags/Git/"},{"name":"Repo","slug":"Repo","permalink":"https://daojianyanying.github.io/tags/Repo/"}]},{"title":"linux基础命令-查看","slug":"linux系统基础命令-1-查看","date":"2024-04-22T11:36:37.000Z","updated":"2024-05-06T08:29:36.431Z","comments":true,"path":"2024/04/22/linux系统基础命令-1-查看/","permalink":"https://daojianyanying.github.io/2024/04/22/linux%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-1-%E6%9F%A5%E7%9C%8B/","excerpt":"","text":"一、CPU信息查看查看CPU的核心数 查看CPU个数 查看CPU线程数 查看CPU的信息 二、内存信息查看三、硬盘信息查看四、查看linux版本","categories":[{"name":"日常","slug":"日常","permalink":"https://daojianyanying.github.io/categories/%E6%97%A5%E5%B8%B8/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://daojianyanying.github.io/tags/linux/"}]},{"title":"代码管理工具(2)-Git","slug":"代码管理工具-2-Git","date":"2024-04-22T11:36:33.000Z","updated":"2024-07-02T11:32:33.319Z","comments":true,"path":"2024/04/22/代码管理工具-2-Git/","permalink":"https://daojianyanying.github.io/2024/04/22/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-2-Git/","excerpt":"","text":"Git的基础使用 说明: Git版本 aaa TortoiseGit版本 Git版本 Git版本 一、Git相关工具的安装1.1、Git的安装1.1.1、下载和安装1.1.2、配置git的ssh用户认证1.1.3、配置多个代码托管服务的认证如下案列为配置gitlab和Gerrit的俩个ssh认证 12345678########################################### 生成ssh的公私自钥 #############################################git config --global user.name &quot;zhangsan&quot;git config --global user.email &quot;zhangsan@devops.com&quot;ssh-keygen -t rsa -C &quot;zhangsan@devops.com&quot;# 第一次回车一定要更改名称，避免覆盖已经存在的默认的公钥和私钥 123456789101112131415161718192021222324############################################## 配置多个SSH ################################################Host * HostKeyAlgorithms +ssh-dss PubkeyAcceptedKeyTypes +ssh-rsa# GerritHost 192.168.1.52 HostName 192.168.1.52 Port: 29418 # Gerrit的服务器的SSH端口 IdentityFile ~/.ssh/id_gerrit_rsa PreferredAuthentications publickey User zhangsan # Git的账户user.name IdentitiesOnly yes# GitlabHost 192.168.10.67 HostName 192.168.10.67 Port: 8022 # Gitlab的服务器的SSH端口 IdentityFile ~/.ssh/id_gitlab_rsa PreferredAuthentications publickey User zhangsan # Git的账户user.name IdentitiesOnly yes 1.2二、Git的目录结构和对象模型三、Git的简单命令四、Git的分支合并五、Git中的冲突解决六、Git的分支策略七、","categories":[{"name":"代码管理","slug":"代码管理","permalink":"https://daojianyanying.github.io/categories/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://daojianyanying.github.io/tags/Git/"}]},{"title":"代码管理工具(1)-SVN","slug":"代码管理工具-1-SVN","date":"2024-04-22T11:36:28.000Z","updated":"2024-04-25T06:54:23.506Z","comments":true,"path":"2024/04/22/代码管理工具-1-SVN/","permalink":"https://daojianyanying.github.io/2024/04/22/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-1-SVN/","excerpt":"","text":"","categories":[{"name":"代码管理","slug":"代码管理","permalink":"https://daojianyanying.github.io/categories/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"}],"tags":[{"name":"代码管理","slug":"代码管理","permalink":"https://daojianyanying.github.io/tags/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"},{"name":"SVN","slug":"SVN","permalink":"https://daojianyanying.github.io/tags/SVN/"}]},{"title":"Web服务端代码管理(3)-VisualSVN","slug":"Web服务端代码管理-3-VisualSVN","date":"2024-04-22T11:36:22.000Z","updated":"2024-04-22T11:38:19.436Z","comments":true,"path":"2024/04/22/Web服务端代码管理-3-VisualSVN/","permalink":"https://daojianyanying.github.io/2024/04/22/Web%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86-3-VisualSVN/","excerpt":"","text":"","categories":[{"name":"代码管理","slug":"代码管理","permalink":"https://daojianyanying.github.io/categories/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"}],"tags":[{"name":"代码管理","slug":"代码管理","permalink":"https://daojianyanying.github.io/tags/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"},{"name":"SVN","slug":"SVN","permalink":"https://daojianyanying.github.io/tags/SVN/"},{"name":"VisualSVN","slug":"VisualSVN","permalink":"https://daojianyanying.github.io/tags/VisualSVN/"}]},{"title":"Web服务端代码管理(2)-Gerrit","slug":"Web服务端代码管理-2-Gerrit","date":"2024-04-22T11:35:30.000Z","updated":"2024-07-09T02:24:15.973Z","comments":true,"path":"2024/04/22/Web服务端代码管理-2-Gerrit/","permalink":"https://daojianyanying.github.io/2024/04/22/Web%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86-2-Gerrit/","excerpt":"","text":"一、Gerrit的介绍 二、Gerrit的安装 2.1、linux系统上原生安装 2.1.1、环境版本说明 2.1.2、准备环境 2.1.3、 2.1.4、 2.1.5、 2.2、Docker上安装 2.2.1、环境准备 2.2.2、使用docker-compose安装 2.3、kubernetes上安装 三、Gerrit的使用 3.1、Gerrit的基础原则 3.1.1、安装方面的基础原则 3.1.2、仓库基础配置 3.1.3、权限配置 四、Gerrit的代码仓同步到Gitlab 4.1、创建对应的同名代码仓(test) 4.1.1、 4.1.2、 4.2、修改gerrit仓库的权限 4.3、配置Gerrit的ssh到gitlab的代码仓上 4.4、修改replication的配置文件并重启Gerrit 4.5、过程中的问题定位 一、Gerrit的介绍二、Gerrit的安装2.1、linux系统上原生安装2.1.1、环境版本说明123Gerrit的版本: 3.8.6openldap的版本: 1.5.0phpldapadmin的版本: 0.9.0 2.1.2、准备环境2.1.3、2.1.4、2.1.5、2.2、Docker上安装2.2.1、环境准备 12345docker pull registry.cn-hangzhou.aliyuncs.com/daojianyanying/gerrit:3.8.6docker pull registry.cn-hangzhou.aliyuncs.com/daojianyanying/openldap:1.5.0docker pull registry.cn-hangzhou.aliyuncs.com/daojianyanying/phpldapadmin:0.9.0 2.2.2、使用docker-compose安装 1234567docker pull gerritcodereview/gerrit docker pull osixia/openldap docker pull osixia/phpldapadminmkdir -p /data/gerritcd /data/gerrit &amp;&amp; mkdir etc git db index cache .sshsudo chown -R 1000:1000 /data/gerrit/ 123456789101112131415161718192021222324252627282930313233343536373839404142434445version: &#x27;3&#x27;services: gerrit: image: gerritcodereview/gerrit:3.9.2 ports: - &quot;29418:29418&quot; - &quot;9090:8080&quot; # WEB项目访问地址 - &quot;25:25&quot; # 邮箱功能开放端口 depends_on: - ldap # 该配置是 ldap服务启动成功后 再启动gerrit服务 container_name: gerrit restart: always volumes: - /data/gerrit/etc:/var/gerrit/etc - /data/gerrit/git:/var/gerrit/git - /data/gerrit/db:/var/gerrit/db - /data/gerrit/index:/var/gerrit/index - /data/gerrit/cache:/var/gerrit/cache - /data/gerrit/.ssh:/var/gerrit/.ssh environment: - CANONICAL_WEB_URL=http://192.168.17.150:9090 #自己的IP command: init # 初始化gerrit镜像配置 不用注释 启动完成后注释该项,再次使用docker-compose再次运行 ldap: image: osixia/openldap:1.5.0 restart: always ports: - &quot;389:389&quot; - &quot;636:636&quot; container_name: ldap environment: - LDAP_ADMIN_PASSWORD=/8520*963.lx volumes: - /data/gerrit/ldap/var:/var/lib/ldap - /data/gerrit/ldap/etc:/etc/ldap/slapd.d ldap-admin: image: osixia/phpldapadmin:0.9.0 container_name: ldap-phpadmin restart: always ports: - &quot;9080:80&quot; environment: - PHPLDAPADMIN_HTTPS=false - PHPLDAPADMIN_LDAP_HOSTS=192.168.17.150 sudo docker-compose -f gerrit.yml up -d初始化完成之后，注释掉 command: init 行，然后再次执行sudo docker-compose -f gerrit.yml up -d 2.3、kubernetes上安装三、Gerrit的使用3.1、Gerrit的基础原则3.1.1、安装方面的基础原则 安装完登陆Gerrit的第一个用户就是管理员用户。 Gerit的插件安装: Gerrit的简称 CCs-抄送人 3.1.2、仓库基础配置普通配置 带有用户名的链接和不带用户名的链接： 使用的认证会不同，带用户名则根据同户名去认证；不带的话会直接读取本地的user.name的值去认证。 Submit type(代码提交方式)： 提交方式分为 Allow content merges(允许内容合并)：、 表示在文件冲突时，对于非同一段的代码(内容)冲突，进行直接合并，能够很大的减少假冲突误报的情况。文件冲突和内容冲突的区别。 Create a new change for every commit not in the target branch： 这个选项被启用时，每次推送更改时，如果目标分支与推送的更改之间存在差异（例如，目标分支已经有了一些新的提交，而推送的更改则基于一个较早的提交），Gerrit会为这些差异创建新的更改请求。 Require Change-Id in commit message： 这个选项被启用时，Gerrit会要求每个提交的提交信息必须包含一个Change-Id。如果提交信息中没有Change-Id，Gerrit会阻止推送操作，返回一个错误消息，提示缺少Change-Id。这有助于确保每个提交都能够被Gerrit正确地跟踪和管理，更容易进行代码审查和合并请求的管理。 Reject implicit merges when changes are pushed for review 这个选项被启用时，它决定了当开发者推送更改进行审查时，如果推送的更改隐式地合并了目标分支，拒绝这个推送。 Enable adding unregistered user as reviewers and CCs on changes 这个选项，它允许未注册的用户作为审查者或抄送人（CC）被添加到更改请求中。默认情况下，这个选项可能是禁用的，以确保只有注册的用户才能参与更改的审查过程。 Set all new changes private by default 这个选项，它决定了新提交的默认权限设置，即是否私有。默认情况下，新提交可能是公开的，这意味着任何人都可以查看它们。然而，如果启用了这个选项，那么新提交将默认为私有，这意味着只有提交者和被邀请的审查者才能查看它们。 Set new changes to “work in progress” by default 这个选项，它决定了新提交的默认状态是否为“工作进展中”。默认情况下，新提交可能立即可供审查，这意味着它们被认为是“已准备好审查”的状态。然而，如果启用了这个选项，那么新提交将默认为“工作进展中”，这意味着它们还在开发阶段，可能需要进一步的工作或审查之前才能准备好被最终合并。 Maximum Git object size limit Match authored data with committer data upon submit这个选项，它决定了提交时作者数据（Author）是否需要与提交者数据（Committer）匹配。默认情况下，Gerrit要求作者和提交者身份线（在Git提交对象中，或注释标签中的标签者线）必须与上传用户的一些注册电子邮件地址匹配。这是为了确保提交者的身份是验证过的。 Reject empty commit upon submit这个选项，它决定了提交时是否应拒绝空提交。空提交指的是那些没有实际更改的提交，这可能是因为提交操作只改变了提交元数据（如作者、日期等），而没有改变代码文件的内容。 Require a valid contributor agreement to upload这个选项，它决定了用户在上传更改之前是否必须完成贡献者协议（Contributor Agreement）的签署。贡献者协议是一种法律文件，用于定义贡献者对项目的责任和义务，以及项目对贡献者的期望。通过要求用户签署贡献者协议，项目可以确保所有贡献者都同意遵守项目的规则和标准。 Require Signed-off in commit message这个选项，它决定了提交时是否必须包含一个“Signed-off-by”声明。这个声明通常出现在提交信息的底部，表明提交者同意项目的贡献者协议，并且承诺遵循项目的开发规范和指导原则。 插件在仓库上的配置 Allowed Author Email Pattern选项，它允许项目管理员指定哪些电子邮件地址可以作为提交者的邮箱地址。这个选项通过配置sendemail.allowedEmails来实现，它可以是一个完整的电子邮件地址列表，也可以是一个域名列表。通过这种方式，Gerrit可以确保只有指定的电子邮件地址或来自指定域名的电子邮件地址可以提交更改。 Allowed Committer Email Pattern选项，它允许项目管理员指定哪些电子邮件地址可以作为提交者的邮箱地址。这个选项通过配置sendemail.allowedEmails来实现，它可以是一个完整的电子邮件地址列表，也可以是一个域名列表。通过这种方式，Gerrit可以确保只有指定的电子邮件地址或来自指定域名的电子邮件地址可以提交更改。 Binary Types选项，用于定义哪些文件类型应该被视为二进制文件。二进制文件通常不能直接通过文本编辑器打开或阅读，因为它们是由二进制数据组成的，而不是人类可读的文本。识别二进制文件对于Gerrit来说很重要，因为它可以影响如何处理这些文件，例如是否允许直接在网页上预览它们。 Blocked Content Type“Blocked Content Type”是一个配置选项，允许项目管理员阻止特定类型的内容上传。这个选项是通过Upload Validator插件配置的，该插件提供了一系列检查来确保上传的文件符合项目的要求。通过配置blockedContentType，你可以指定哪些MIME类型的文件不被接受。 Blocked Content Type Allowlist“Blocked Content Type Allowlist”是一个配置选项，允许项目管理员创建一个白名单来指定哪些MIME类型的文件是允许上传的。这个选项是通过Upload Validator插件配置的，该插件提供了一系列检查来确保上传的文件符合项目的要求。通过配置blockedContentTypeWhitelist，你可以指定哪些MIME类型的文件是允许的，而其他类型的文件将被阻止。 Blocked File Extension它允许开发者在提交代码之前进行代码审查。Gerrit支持多种文件类型，但对于某些特定的文件扩展名，Gerrit可能会将它们标记为“阻塞”（blocked），这意味着这些文件需要特别注意或处理。 Blocked Keyword ExtensionGerrit本身并不直接定义特定的”Blocked File Extensions”列表，这意味着Gerrit不会自动将某些特定的文件扩展名标记为阻塞。相反，Gerrit的行为更多地受到项目配置和用户定义规则的影响。然而，有一些常见的文件类型和模式可能会被团队成员或项目管理员标记为需要特别注意或处理，以避免潜在的问题。 Invalid Filename Pattern通过配置Upload Validator插件，可以定义无效文件名模式（Invalid Filename Pattern）。这允许项目管理员或维护者限制上传的文件名，以遵循特定的命名约定或规则。这种配置在项目的project.config文件中进行设置，也可以通过Gerrit的Web UI进行配置。 Max Path Length maxPathLength是一个配置参数，用于限制提交的路径长度。限制路径长度是为了防止过长的路径名称导致的各种问题，例如性能问题、兼容性问题等。路径长度计数包括目录和文件名在内的总字符数，设置合理的maxPathLength值对于防止深层嵌套目录结构和过长的文件名非常重要，这有助于提高系统的稳定性和可维护性。 Projects Refs Reject Duplicate Pathnames Reject Duplicate Pathnames Localelocale是一个重要的配置选项，用于设置Gerrit服务器的地区设置。地区设置（Locale）定义了Gerrit界面的语言、日期和时间格式、数字格式等方面的表现形式。通过配置locale，你可以使Gerrit适应不同地区的用户需求，使得Gerrit的用户界面更加友好和易于理解。 Reject Submodules“Reject Submodules”（拒绝子模块）是一个配置选项，用于防止提交包含Git子模块的情况。当这个选项被启用时，Gerrit将拒绝任何包含子模块的提交。这有助于确保项目的纯净性和一致性，因为子模块可能引入额外的复杂性和依赖关系。 Reject Symbolic Links“Reject Symbolic Links”（拒绝符号链接）是一个配置选项，用于防止提交包含符号链接的情况。当这个选项被启用时，Gerrit将拒绝任何包含符号链接的提交。这有助于确保项目的纯净性和一致性，因为符号链接可能引入额外的复杂性和依赖关系。 Reject Windows Line Endings“Reject Windows Line Endings”（拒绝Windows换行符）是一个配置选项，用于防止提交包含Windows风格的换行符（CRLF）的情况。当这个选项被启用时，Gerrit将拒绝任何包含CRLF换行符的提交。这有助于确保项目的纯净性和一致性，因为CRLF换行符可能在不同操作系统间造成混淆。 Reject Author Email Pattern“Reject Author Email Pattern”（拒绝作者电子邮件模式）是一个配置选项，用于通过正则表达式模式来验证提交的作者电子邮件地址。这个选项允许项目管理员或维护者定义一个或多个电子邮件地址模式，只有符合这些模式的电子邮件地址才会被接受。任何不符合这些模式的提交都会被拒绝。 Reject Committer Email Pattern“Reject Committer Email Pattern”（拒绝提交者电子邮件模式）是一个配置选项，用于通过正则表达式模式来验证提交的提交者电子邮件地址。这个选项允许项目管理员或维护者定义一个或多个电子邮件地址模式，只有符合这些模式的电子邮件地址才会被接受。任何不符合这些模式的提交都会被拒绝。 Required Footers“Required Footers”（必需的脚注）是一种强制提交者在提交消息中包含特定内容的方法。这可以通过配置项目的project.config文件中的submit-requirement部分来实现。这种配置允许项目管理员指定提交消息必须包含的特定脚注，以便于跟踪和组织提交。 3.1.3、权限配置全局权限配置 AccessDataBase 在 Gerrit 中，全局能力（Global Capabilities）的“访问数据库”权限允许用户直接访问 Gerrit 的后端数据库。这种权限通常被赋予需要执行数据库操作的高级用户，如系统管理员或进行定制化 Gerrit 插件开发的人员。通过这种方式，他们可以执行诸如备份、恢复、维护数据库索引等操作，这些操作不能通过 Gerrit 的标准界面或 API 完成。 Batch Changes Limit全局能力（Global Capabilities）的“批量更改限制”（Batch Changes Limit）是一个关键的配置选项，它控制了用户可以同时提交的最大更改数量。这个限制对于防止过度的资源消耗和保持系统的稳定性非常重要。通过限制每个用户可以提交的更改数量，Gerrit 可以避免某些操作（如大量文件的添加或修改）对服务器造成过大的负担，从而确保系统的响应速度和可靠性。 Create Group、 Create Account、 Create Project、Delete Own Project Email Reviewers 在 Gerrit 中，全局能力（Global Capabilities）的“电子邮件通知审查者”（Email Reviewers）是一个重要的功能，它允许管理员配置 Gerrit 实例以自动发送电子邮件通知给指定的审查者。当有新的更改提交到 Gerrit 时，这个功能可以确保所有相关的审查者都得到及时的通知，从而促进更快的反馈和协作。 Flush Caches 在 Gerrit 中，全局能力（Global Capabilities）的“刷新缓存”（Flush Caches）是一个重要的功能，它允许管理员强制清除 Gerrit 实例中的各种缓存。缓存是 Gerrit 性能优化的一部分，它们存储了频繁访问的数据，如项目列表、用户信息、提交历史等，以减少数据库查询的次数并提高响应速度。然而，有时候，由于数据的变化或缓存的过期，缓存中的数据可能会变得不准确或过时，此时就需要刷新缓存来确保 Gerrit 的数据一致性和准确性。 Kill Task 全局能力（Global Capabilities）的“杀死任务”（Kill Task）是一个高级功能，允许管理员终止 Gerrit 后台工作队列中正在执行或即将执行的任务。这种能力主要针对那些长时间运行或由于某种原因无法正常结束的任务，例如重复的同步任务或用户启动的长时间运行的操作，如 upload-pack 或 receive-pack。通过这种方式，管理员可以立即停止这些任务，释放服务器资源并恢复正常的服务。 Maintain Server 全局能力（Global Capabilities）的“维护服务器”（Maintain Server）是一个广泛的权限集，允许用户执行一系列与服务器管理和维护相关的操作。这个权限集通常授予了对 Gerrit 实例进行高级配置和管理的能力，包括但不限于数据库管理、服务器配置更改、日志管理以及执行一些特殊的服务器维护任务。 Modify Account 在 Gerrit 中，全局能力（Global Capabilities）的“修改账户”（Modify Account）权限允许用户对 Gerrit 中的用户账户进行管理。这个权限集包含了一系列操作，包括创建新账户、删除账户、修改账户属性（如电子邮件地址、用户名等）、以及管理账户的权限和组成员资格。通过这种方式，拥有这个权限的用户可以对 Gerrit 系统中的用户进行精细的管理和配置。 Query limit全局能力（Global Capabilities）的“查询限制”（Query Limit）是一个配置选项，用于控制用户可以执行的查询的数量。这个限制旨在防止恶意用户或误操作导致的查询过载，保护 Gerrit 服务器的资源和性能。通过设定查询限制，可以确保每个用户在一定时间内只能执行有限数量的查询，从而避免对服务器造成过大的负担。 Read As、 Run As全局能力（Global Capabilities）的“读作为”（Read As）和“运行作为”（Run As）是两种高级权限设置，允许用户在执行操作时模拟其他用户的身份。这两个功能在 Gerrit 中非常有用，尤其是在需要执行特定用户视图或操作权限的场景时。 Run Barbage Collection全局能力（Global Capabilities）的“运行垃圾回收”（Run Garbage Collection）是一个高级功能，允许用户手动触发 Gerrit 后台的垃圾回收过程。垃圾回收是 Java 虚拟机（JVM）中的一个过程，用于自动回收不再使用的对象内存空间，从而防止内存泄漏和优化应用性能。对于像 Gerrit 这样的 Java 应用来说，定期运行垃圾回收可以帮助保持系统的稳定性和响应速度。 View Access、 View all account、 View Caches、View Connetion、 View Queue、View Secondary Emails全局能力（Global Capabilities）提供了一系列与权限管理和系统观察相关的功能。这些功能允许用户查看和管理 Gerrit 实例的不同方面，包括访问权限、账户详情、缓存状态、连接信息、队列任务以及二级电子邮件设置。 Administrate Server全局能力（Global Capabilities）的“管理服务器”（Administrate Server）是一个高级权限集，允许用户执行一系列与服务器管理和维护相关的操作。这个权限集通常授予了对 Gerrit 实例进行高级配置和管理的能力，包括但不限于数据库管理、服务器配置更改、日志管理以及执行一些特殊的服务器维护任务。 Priority全局能力（Global Capabilities）的“优先级”（Priority）是一个关键的概念，用于定义用户在 Gerrit 中的访问级别和操作权限。优先级决定了用户可以执行哪些操作，以及他们对 Gerrit 系统的访问权限。Gerrit 使用一个基于优先级的权限模型，该模型允许管理员精细地控制谁可以访问什么资源，以及他们可以执行哪些操作。 Start Replication全局能力（Global Capabilities）的“启动复制”（Start Replication）是一个高级权限，允许用户启动 Gerrit 的数据复制过程。数据复制是 Gerrit 中的一个关键功能，用于在 Gerrit 实例之间同步数据，包括提交、标签、项目配置等信息。这种功能特别重要在分布式 Gerrit 部署中，或者当需要将 Gerrit 数据从一个环境迁移到另一个环境时。 Stream Events全局能力（Global Capabilities）的“流事件”（Stream Events）是一个高级权限，允许用户通过 SSH 连接实时监控 Gerrit 中发生的各种事件。这个功能对于需要自动化响应 Gerrit 活动的脚本或工具非常有用，例如自动发送通知、更新外部系统状态或执行某些基于事件触发的操作。 View Plugins全局能力（Global Capabilities）的“查看插件”（View Plugins）是一个权限设置，允许用户查看 Gerrit 中安装的所有插件及其详细信息。插件是 Gerrit 的扩展机制，用于增加 Gerrit 的功能或改变其行为。通过查看插件，用户可以了解 Gerrit 实例中安装了哪些插件，以及它们的版本和配置。 一般仓库权限 Label Code-Review “Code-Review”标签是一个预定义的标签，用于代码审查过程中对更改的评分。这个标签最初由 Android Open Source Project 引入，用来表达“我阅读了代码，它看起来相当正确”。Code-Review 标签的值范围从 -2 到 +2，每个值代表了不同的审查意见和提交要求。 Label Code-Review(On Behalf Of) “Code-Review (On Behalf Of)” 是一个特殊的标签权限配置，允许用户代表其他用户对更改进行代码审查。这个功能主要用于团队合作和代码审查流程中，当一个用户在审查代码时，他们可能需要代表其他团队成员进行代码审查，特别是在大型项目或分布式团队中。 Abandon “Abandon”（放弃）是一个重要的操作权限，允许用户取消他们对 Gerrit 更改的 所有操作，包括撤销提交请求、取消合并请求等。这个权限对于需要撤销或重新安排的更改非常有用，尤其是在更改经过初步审查后发现存在问题或不再需要的情况下。 Add Patch Set “Add Patch Set”（添加补丁集）是一个关键的操作权限，允许用户向现有的更改提交（Change）添加新的补丁集。补丁集是更改的一部分，包含了具体的代码修改、文档更新或其他类型的更改。通过添加补丁集，用户可以在更改的生命周期中继续推送新的修改，这对于持续的开发和改进非常有用。 Create Reference “Create Reference”（创建引用）是一个高级权限，允许用户创建新的 Git 引用（例如分支或标签）。Git 引用是指向特定提交对象的轻量级别别名，它们在 Gerrit 中用于组织和管理代码的不同版本。通过创建引用，用户可以在 Gerrit 中创建新的分支或标签，以便于特定的开发工作流程或版本管理策略。 Create Singled Tag 创建单个标签（Single Tag）的权限配置是一个重要的安全控制机制。这个功能允许用户对特定的提交版本进行标记，以便于追踪和管理代码变更。要配置Gerrit以限制谁可以创建单个标签，你需要编辑Gerrit的权限文件（通常是refs/meta/config中的一个项目）。下面是一些步骤和示例来帮助你完成这个任务。 Create Annotated Tag 创建注释标签（Annotated Tag）是另一种强大的功能，它允许开发者对特定的提交版本进行标记，并附加额外的信息，如描述、标签名称等。与单个标签不同，注释标签提供了更多元数据，使得代码历史的跟踪更加灵活和详细。为了配置Gerrit以限制谁可以创建注释标签，你需要编辑Gerrit的权限文件，类似于配置单个标签的权限。 Delete Changes 删除更改（Changes）的权限配置是一个关键的安全控制机制。它决定了哪些用户可以删除已经合并到主分支的更改，以及如何处理其他状态下的更改。配置这一权限需要编辑Gerrit的权限文件，通常位于每个项目的refs/meta/config分支上的project-name.config文件中。确认你的Gerrit实例使用的是哪种类型的权限文件。在每个项目的refs/meta/config分支上，你应该能找到一个名为project-name.config的文件。如果该文件不存在，你可能需要创建一个。 Delete Own Changes配置“删除自己所做的更改”（Delete Own Changes）的权限是一个重要的安全控制机制。这个权限允许用户删除他们自己提交的更改，而不受其他用户的影响。配置这一权限需要编辑Gerrit的权限文件，通常位于每个项目的refs/meta/config分支上的project-name.config文件中。，确认你的Gerrit实例使用的是哪种类型的权限文件。在每个项目的refs/meta/config分支上，你应该能找到一个名为project-name.config的文件。如果该文件不存在，你可能需要创建一个。 Edit Hashtags编辑标签（Hashtags）的权限配置是一个重要的安全控制机制。这个权限允许用户编辑他们自己或他人在评论中添加的标签。配置这一权限需要编辑Gerrit的权限文件，通常位于每个项目的refs/meta/config分支上的project-name.config文件中。 Edit Topic Name编辑主题名称（Topic Name）的权限配置是一个重要的安全控制机制。这个权限允许用户更改他们自己或他人的主题名称。配置这一权限需要编辑Gerrit的权限文件，通常位于每个项目的refs/meta/config分支上的project-name.config文件中。 Forge Author Identity、Forge Commit Identity、Forge Author Identity配置”Forge Author Identity”权限涉及到允许某些用户作为Forge作者身份进行操作，这通常用于集成和自动化流程中。这种配置允许用户以特定的身份提交更改，从而实现更高级别的自动化和集成。配置这一权限需要编辑Gerrit的权限文件，通常位于每个项目的refs/meta/config分支上的project-name.config文件中。 配置”Forge Commit Identity”权限允许某些用户以特定的身份提交更改。这一功能特别适用于自动化脚本和持续集成&#x2F;持续交付（CI&#x2F;CD）管道，其中需要以特定用户的身份执行提交操作。配置这一权限需要编辑Gerrit的权限文件，通常位于每个项目的refs/meta/config分支上的project-name.config文件中。 “Forge Author Identity”权限允许用户以其他用户的身份提交更改。这一功能主要用于镜像（mirroring）流程，尤其是在从上游项目复制更改时非常有用。此外，当需要使用服务器自己的名字和电子邮件地址在新提交对象的提交者行时，也可能需要此权限。配置这一权限需要编辑Gerrit的权限文件，通常位于每个项目的refs/meta/config分支上的project-name.config文件中。 OwnerOwner权限是一个关键的访问控制机制，它允许用户对特定的代码更改进行完全的管理和控制。这个权限通常被分配给项目的主要贡献者或维护者，以确保他们可以审查、合并或拒绝其他人的提交。 PushPush权限允许用户将更改推送到服务器上。这种权限对于任何希望参与项目开发的人来说都是非常重要的，因为它决定了他们能否将自己的工作提交到项目中。配置Push权限时，需要考虑几个关键因素，包括安全性、项目流程以及团队合作模式。 Push Merge CommitPush Merge Commit权限允许用户将合并操作的结果（即合并提交）推送到远程仓库。这一权限对于项目的维护者和开发者来说尤其重要，因为它影响着代码的最终集成和发布流程。配置这一权限时，需要谨慎考虑，因为它涉及到代码的稳定性和安全性。 ReadRead权限允许用户查看项目中的代码更改、提交历史、分支信息等。这是Gerrit中最基本的权限之一，因为几乎所有参与项目的人都需要读取项目数据以进行代码审查、讨论或获取项目状态更新。配置Read权限时，目标是确保只有那些需要访问项目数据的用户才能这么做。 Rebase Rebase权限允许用户对他们的本地更改进行重新基准（rebase）操作，即将他们的更改应用到另一个分支的最新提交上。这一功能对于保持代码的整洁和减少合并冲突非常有用。配置Rebase权限时，需要考虑谁应该能够执行此操作，因为它可能会影响到项目的代码历史和稳定性。 Remove ReviewerRemove Reviewer权限允许用户从一个代码更改请求中移除审查者（reviewer）。这是一个重要的权限，因为它影响着代码审查的流程和决策过程。配置这一权限时，需要仔细考虑谁应该拥有这个能力，因为它可以直接影响到代码更改的审查质量和项目的决策机制。 RevertRevert权限允许用户撤销（revert）之前的提交。这意味着如果某个提交引起了问题或需要回退到之前的状态，拥有这个权限的用户可以轻松地执行这个操作。配置Revert权限时，需要考虑谁应该拥有这个能力，因为它直接影响到项目的代码历史和稳定性。 SubmitSubmit权限允许用户将他们的代码更改合并到主分支或其他指定分支。这是项目中最关键的权限之一，因为它决定了谁可以将他们的更改正式加入项目代码库。配置Submit权限时，需要谨慎考虑，因为它直接影响到项目的代码质量和稳定性。以下是如何配置Gerrit中的Submit权限的步骤。 Submit(On Behalf Of)Submit (On Behalf Of)权限允许用户代表其他用户提交代码更改。这意味着一个人可以提交另一人的代码更改，而不需要那个人的Submit权限。这在某些情况下非常有用，例如，当一个项目管理员需要批准并提交由其他开发者完成的代码更改时。配置这一权限时，需要考虑谁应该拥有这个能力，因为它直接影响到项目的代码质量和审查流程。以下是如何配置Gerrit中的Submit (On Behalf Of)权限的步骤。 Toggle Work In Progress StateToggle Work In Progress (WIP)状态权限允许用户切换代码更改的工作状态，从而标记更改为“工作中”（Work In Progress）或“已完成”（Not WIP）。这个功能对于项目管理和跟踪开发进度非常有用，特别是在大型项目或需要严格跟踪进度的项目中。配置这一权限时，需要考虑谁应该拥有这个能力，因为它直接影响到项目的代码审查和管理流程。以下是如何配置Gerrit中的Toggle Work In Progress State权限的步骤。 View Private ChangesView Private Changes权限允许用户查看私有更改，即那些被标记为私有的代码更改。私有更改通常用于内部讨论、实验性更改或临时解决方案，不打算公开分享。配置这一权限时，需要考虑谁应该拥有这个能力，因为它直接影响到项目的代码审查和管理流程。以下是如何配置Gerrit中的View Private Changes权限的步骤。 四、Gerrit的代码仓同步到Gitlab4.1、创建对应的同名代码仓(test)4.1.1、4.1.2、4.2、修改gerrit仓库的权限4.3、配置Gerrit的ssh到gitlab的代码仓上4.4、修改replication的配置文件并重启Gerrit修改配置文件gerrit.config,创建新的replication.config 1234567891011121314# cat gerrit/etc/replication.config [gerrit] autoReload = true replicateOnStartup = true[replication] lockErrorMaxRetries = 5 maxRetries = 5[remote &quot;test&quot;] projects = test url = git@192.168.17.150:8022/zhangsan/test.git push = +refs/heads/*:refs/heads/* push = +refs/tags/*:refs/tags/* # push = +refs/changes/*:refs/changes/* 如果报错，可以注释掉该行 threads = 3 1234# vim cat gerrit/etc/gerrit.config # 打开管理员远程调试插件的功能[plugins]allowRemoteAdmin = true 4.5、过程中的问题定位123ssh -p 29418 zhangsan@192.168.17.150 gerrit --helpssh -p 29418 zhangsan@192.168.17.150 gerrit plugin --helpssh -p 29418 zhangsan@192.168.17.150 replication --help","categories":[{"name":"代码管理","slug":"代码管理","permalink":"https://daojianyanying.github.io/categories/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://daojianyanying.github.io/tags/Git/"},{"name":"代码管理","slug":"代码管理","permalink":"https://daojianyanying.github.io/tags/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"},{"name":"Gerrit","slug":"Gerrit","permalink":"https://daojianyanying.github.io/tags/Gerrit/"}]},{"title":"Web服务端代码管理(1)-Gitlab","slug":"Web服务端代码管理-1-Gitlab","date":"2024-04-22T11:35:23.000Z","updated":"2024-04-25T03:57:56.591Z","comments":true,"path":"2024/04/22/Web服务端代码管理-1-Gitlab/","permalink":"https://daojianyanying.github.io/2024/04/22/Web%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86-1-Gitlab/","excerpt":"","text":"","categories":[{"name":"代码管理","slug":"代码管理","permalink":"https://daojianyanying.github.io/categories/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://daojianyanying.github.io/tags/Git/"},{"name":"Gitlab","slug":"Gitlab","permalink":"https://daojianyanying.github.io/tags/Gitlab/"},{"name":"代码管理","slug":"代码管理","permalink":"https://daojianyanying.github.io/tags/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"}]},{"title":"Hexo搭建个人博客","slug":"个人博客搭建-Hexo","date":"2024-04-21T14:23:44.847Z","updated":"2024-04-25T07:19:31.700Z","comments":true,"path":"2024/04/21/个人博客搭建-Hexo/","permalink":"https://daojianyanying.github.io/2024/04/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-Hexo/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"common","slug":"common","permalink":"https://daojianyanying.github.io/categories/common/"}],"tags":[]}],"categories":[{"name":"代码管理","slug":"代码管理","permalink":"https://daojianyanying.github.io/categories/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"},{"name":"日常","slug":"日常","permalink":"https://daojianyanying.github.io/categories/%E6%97%A5%E5%B8%B8/"},{"name":"common","slug":"common","permalink":"https://daojianyanying.github.io/categories/common/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://daojianyanying.github.io/tags/Git/"},{"name":"Repo","slug":"Repo","permalink":"https://daojianyanying.github.io/tags/Repo/"},{"name":"linux","slug":"linux","permalink":"https://daojianyanying.github.io/tags/linux/"},{"name":"代码管理","slug":"代码管理","permalink":"https://daojianyanying.github.io/tags/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"},{"name":"SVN","slug":"SVN","permalink":"https://daojianyanying.github.io/tags/SVN/"},{"name":"VisualSVN","slug":"VisualSVN","permalink":"https://daojianyanying.github.io/tags/VisualSVN/"},{"name":"Gerrit","slug":"Gerrit","permalink":"https://daojianyanying.github.io/tags/Gerrit/"},{"name":"Gitlab","slug":"Gitlab","permalink":"https://daojianyanying.github.io/tags/Gitlab/"}]}